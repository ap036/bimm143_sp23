---
title: "Class 6: R Functions"
author: Aparajita Pranjal
date: 2023-04-21
format: gfm
editor_options: 
  chunk_output_type: inline
---

In this class we will develop our own R functions to calculate average grades in a fictional class.

We will start with a simplified version of the problem, by calculating the average grade of one student.

# Simplified version

```{r}
# Example input vectors to start with
student1 <- c(100, 100, 100, 100, 100, 100, 100, 90)
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
```

We are going to start by calculating the average score of the homework.

```{r}

mean(student1)

```

To get the minimum score we can use `which.min` .

```{r}
student1
which.min(student1)

```

The average of the first 7 homework scores:

```{r}
mean(student1[1:7])
```

Another way to select the first 7 homework scores:

```{r}
student1[1:7]
student1[-8]
```

Another way to drop the lowest score:

```{r}
st1_lowest_score = student1[-which.min(student1)]
```

Then to find the mean of the scores after dropping the lowest:

```{r}
mean(st1_lowest_score)
```

Now to calculate the average score for all the students we generalize the function. Starting with student 2:

```{r}
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
st2_lowest_score = student2[-which.min(student2)]
st2_lowest_score
```

There is a way to calculate the mean dropping the missing values (or NA):

```{r}
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
mean(student2, na.rm = TRUE)
```

For student3:

```{r}
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
mean(student3, na.rm = TRUE)
```

We want to know the position of the NAs. So for student2 we can use the following:

```{r}
student2 <- c(100, NA, 90, 90, 90, 90, 97, 80)
which(is.na(student2))
```

For student3:

```{r}
student3 <- c(90, NA, NA, NA, NA, NA, NA, NA)
which(is.na(student3))
```

For considering the missing values, we can mask the NAs with zeros.

```{r}
student2[is.na(student2)] <- 0
student2[is.na(student2)]
student2
student3[is.na(student3)] <- 0
student3
mean(student3)
```

This is going to be our final working snippet of code for all students (with and without NA values).

```{r}
student3[is.na(student3)] <- 0
student3_drop_lowest = student3[-which.min(student3)]
mean(student3_drop_lowest)
```

# Function grade()

**Q1.** Write a function grade() to determine an overall grade from a vector of student homework assignment scores dropping the lowest single score. If a student misses a homework (i.e. has an NA value) this can be used as a score to be potentially dropped. Your final function should be adequately explained with code comments and be able to work on an example class gradebook. such as this one in CSV format: "https://tinyurl.com/gradeinput"

```{r}
#' Calculate the average score for a vector of homework scores, dropping the lowest score, and considering NA values as zeros.
#'
#' @param x A numeric vector of homework scores
#'
#' @return The average value of homework scores
#' @export
#'
#' @examples
grade <- function(x) {
  # Mask NA values with zero
  x[is.na(x)] <- 0
  # Drop lowest score
  x_drop_lowest = x[-which.min(x)]
  mean(x_drop_lowest)  
}
```

Let's apply the function:

```{r}
grade(student1)
grade(student2)
grade(student3)
```

Now applying it to the sample gradebook form this URL:

```{r}
URL <- "https://tinyurl.com/gradeinput"
gradebook <- read.csv(URL, row.names = 1)
head(gradebook)
```

Let's apply the function to the gradebook using `apply` and running it by **rows** using `MARGIN=1`.

```{r}
apply(gradebook, 1, grade)
```

**Q2.** Using your grade() function and the supplied gradebook, Who is the top scoring student overall in the gradebook? **Student 18**

```{r}
which.max(apply(gradebook, 1, grade))
```

**Q3.** From your analysis of the gradebook, which homework was toughest on students (i.e. obtained the lowest scores overall? **HW2**

```{r}
gradebook[is.na(gradebook)] <- 0
apply(gradebook, 2, mean)
```

Instead of assigning NAs to zeros, if we remove the NAs then the toughest homework is **HW3** according to the mean. If we try using the median instead we get **HW2** as the hardest.

```{r}
gradebook <- read.csv(URL, row.names = 1)
apply(gradebook, 2, mean, na.rm = TRUE)
apply(gradebook, 2, median, na.rm = TRUE)
```

```{r}
boxplot(gradebook)
```

**Q4.** From your analysis of the gradebook, which homework was most predictive of overall score (i.e. highest correlation with average grade score)? **HW5**

```{r}
overall_grades = apply(gradebook, 1, grade)
#For individual column
cor(gradebook$hw1,overall_grades)
#For all columns
gradebook[is.na(gradebook)] <- 0
correlation_values = apply(gradebook, 2, cor, y = overall_grades)
which.max(correlation_values)
```
